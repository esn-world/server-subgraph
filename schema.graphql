directive @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

directive @link(import: [link__Import], url: String!) on SCHEMA

directive @override(from: String!) on FIELD_DEFINITION

directive @shareable on FIELD_DEFINITION | OBJECT

type ActivityLog {
  id: ID!
  createdAt: DateTime!
  message: String!
  data: JSON
  oldData: JSON
  involvedUser: String
  severity: String!
}

type ActivityLogStat {
  message: String!
  count: Int!
}

type CostItem {
  id: ID!
  createdAt: DateTime!
  event: TumiEvent!
  eventId: ID!
  name: String!
  calculationInfo: String!
  details: String
  amount: Decimal!
  actualAmount: Decimal
  complete: Boolean!
  onInvoice: Boolean!
  notSubsidized: Boolean!
  receipts: [Receipt!]!
  submittedAmount: Decimal!
}

input CreateEventFromTemplateInput {
  start: DateTime!
  end: DateTime!
  participantLimit: Int!
  organizerLimit: Int!
  registrationLink: String
  registrationMode: RegistrationMode!
  eventOrganizerId: ID!
  price: Decimal
  excludeFromStatistics: Boolean!
  excludeFromRatings: Boolean!
}

input CreateEventTemplateCategoryInput {
  name: String!
  icon: String!
}

input CreateEventTemplateInput {
  comment: String!
  coordinates: JSON!
  description: String!
  duration: Decimal!
  icon: String!
  insuranceDescription: String
  location: String!
  googlePlaceId: String!
  googlePlaceUrl: String!
  organizerText: String!
  participantText: String!
  shouldBeReportedToInsurance: Boolean!
  title: String!
  categoryId: ID!
}

input CreatePhotoShareInput {
  cols: Int!
  rows: Int!
  container: String!
  originalBlob: String!
  type: String!
}

input CreateReceiptInput {
  costItemId: ID!
  amount: Decimal!
  container: String!
  blob: String!
  type: String!
  md5: String!
}

input CreateSubmissionItemInput {
  required: Boolean!
  submissionTime: SubmissionTime!
  type: SubmissionItemType!
  name: String!
  instruction: String!
  data: JSON!
}

input CreateTransactionInput {
  amount: Float!
  subject: String!
  direction: TransactionDirection!
  status: TransactionStatus!
  type: TransactionType!
  comment: String
  userId: String
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  university: String!
  birthdate: DateTime!
  enrolmentStatus: EnrolmentStatus!
  phone: String
}

input DateRangeInput {
  start: DateTime
  end: DateTime
}

scalar DateTime

scalar Decimal

enum EnrolmentStatus {
  LOCAL
  EXCHANGE
  INTERNATIONAL
  NONE
  OTHER
}

type EventOrganizer {
  id: ID!
  createdAt: DateTime!
  tenant: Tenant!
  tenantId: ID!
  name: String!
  text: String!
  link: String
  events: [TumiEvent!]!
}

type EventRegistration {
  id: ID!
  createdAt: DateTime!
  type: RegistrationType!
  user: User!
  userId: ID!
  event: TumiEvent!
  eventId: ID!
  transactions(directions: [TransactionDirection!]): [Transaction!]!

  """The sum of all transactions related to this registration"""
  balance: Decimal!
  checkInTime: DateTime
  manualCheckin: Boolean!
  status: RegistrationStatus!
  cancellationReason: String
  submissions: [EventSubmission!]!
  rating: Int
  anonymousRating: Boolean!
  userComment: String
  didAttend: Boolean!
  belongsToCurrentUser: Boolean!
  deletingCode: EventRegistrationCode
  creatingCode: EventRegistrationCode
}

type EventRegistrationCode {
  id: ID!
  createdAt: DateTime!
  createdById: ID!
  creator: User!
  registrationToRemoveId: ID
  registrationCreatedId: ID
  targetEvent: TumiEvent!
  targetEventId: ID!
  isPublic: Boolean!
  status: RegistrationStatus!
  sepaAllowed: Boolean!
  connectedRegistrations: [EventRegistration!]!
  registrationToRemove: EventRegistration
  registrationCreated: EventRegistration
}

type EventSubmission {
  id: ID!
  createdAt: DateTime!
  registration: EventRegistration!
  registrationId: ID
  submissionItem: EventSubmissionItem!
  submissionItemId: ID!
  data: JSON!
}

type EventSubmissionItem {
  id: ID!
  createdAt: DateTime!
  event: TumiEvent!
  eventId: ID
  name: String!
  required: Boolean!
  submissionTime: SubmissionTime!
  type: String!
  instruction: String!
  data: JSON
  submissions: [EventSubmission!]!
  ownSubmissions(onlyOwn: Boolean): [EventSubmission!]!
  responses(onlyWithPurchase: Boolean): JSON!
}

type EventTemplate {
  id: ID!
  createdAt: DateTime!
  title: String!
  icon: String!
  description: String!
  comment: String!
  location: String!
  googlePlaceId: String
  googlePlaceUrl: String
  coordinates: JSON
  duration: Decimal!
  participantText: String!
  organizerText: String!
  finances: JSON!
  insuranceDescription: String!
  shouldBeReportedToInsurance: Boolean!
  eventInstances: [TumiEvent!]!
  eventInstanceCount: Int!
  tenant: Tenant!
  category: EventTemplateCategory
  medianParticipantCount: Int!
  medianOrganizerCount: Int!
  participantRating: Float
  participantRatingCount: Int
}

type EventTemplateCategory {
  id: ID!
  createdAt: DateTime!
  name: String!
  icon: String!
  templates: [EventTemplate!]!
  templateCount: Int!
  eventCount: Int!
  tenant: Tenant!
  tenantId: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type LineItem {
  id: ID!
  createdAt: DateTime!
  cancellationReason: String
  cart: ShoppingCart!
  cost: Decimal!
  pickupTime: DateTime
  product: Product!
  productId: ID!
  purchase: Purchase!
  purchaseId: ID
  quantity: Int!
  shoppingCartId: ID
  submissions: [EventSubmission!]!
}

enum LogSeverity {
  SILLY
  DEBUG
  INFO
  WARNING
  ERROR
}

enum MembershipStatus {
  NONE
  TRIAL
  FULL
  SPONSOR
  ALUMNI
}

type Mutation {
  deleteCostItem(id: ID!): CostItem!
  rateEvent(id: ID!, rating: Int!, comment: String, anonymousRating: Boolean): TumiEvent!
  createEventFromTemplate(input: CreateEventFromTemplateInput!, templateId: ID!): TumiEvent!
  addOrganizerToEvent(eventId: ID!, userId: ID!): TumiEvent!
  updateEventTemplateConnection(eventId: ID!, templateId: ID!): TumiEvent!
  updateEventGeneralInfo(eventId: ID!, input: UpdateGeneralEventInput!): TumiEvent!
  updateEventCoreInfo(eventId: ID!, input: UpdateCoreEventInput!): TumiEvent!
  changeEventPublication(eventId: ID!, publicationState: PublicationState!): TumiEvent!
  updateEventLocation(eventId: ID!, input: UpdateEventLocationInput!): TumiEvent!
  deleteEvent(id: ID!): TumiEvent!
  updateCostItemsFromTemplate(eventId: ID!): TumiEvent!
  createEventOrganizer(newOrganizerInput: NewOrganizerInput!): EventOrganizer!
  checkInUser(registrationId: ID!, manualCheckin: Boolean): EventRegistration!
  deregisterFromEvent(registrationId: ID!, withRefund: Boolean, refundFees: Boolean): TumiEvent!
  restorePayment(registrationId: ID!): TumiEvent!
  cancelPayment(registrationId: ID!): TumiEvent!
  registerForEvent(eventId: ID!, registrationType: RegistrationType, submissions: JSON, price: JSON): TumiEvent!
  useRegistrationCode(id: ID!, price: JSON): EventRegistrationCode!
  createRegistrationCode(registrationId: ID, eventId: ID!, isPublic: Boolean, sepaAllowed: Boolean): EventRegistrationCode!
  deleteRegistrationCode(id: ID!): EventRegistrationCode!
  createEventTemplate(input: CreateEventTemplateInput!): EventTemplate!
  updateTemplate(templateId: ID!, input: UpdateTemplateInput!): EventTemplate!
  updateTemplateCategory(templateId: ID!, categoryId: ID!): EventTemplate!
  updateTemplateFinances(templateId: ID!, finances: JSON!): EventTemplate!
  updateTemplateLocation(templateId: ID!, location: UpdateTemplateLocationInput!): EventTemplate!
  deleteTemplate(templateId: ID!): EventTemplate!
  createEventTemplateCategory(input: CreateEventTemplateCategoryInput!): EventTemplateCategory!
  deleteEventTemplateCategory(categoryId: ID!): EventTemplateCategory!
  createReceipt(input: CreateReceiptInput!, costItemId: ID!): Receipt!
  deleteReceipt(id: ID!): Receipt!
  createSubmissionItem(targetId: ID!, target: String, input: CreateSubmissionItemInput!): EventSubmissionItem!
  deleteSubmissionItem(id: ID!): EventSubmissionItem!
  updateTenant(id: ID!, updateTenantInput: UpdateTenantInput!): Tenant!
  createTransaction(createTransactionInput: CreateTransactionInput!): Transaction!
  createUser(input: CreateUserInput!): User!
  updateUser(userId: ID!, input: UpdateUserInput!): User!
  updateUserPosition(userId: ID!, position: String): User!
  updateUserPicture(userId: ID!, file: String!): User!
  updateESNCard(id: ID!, esnCardOverride: Boolean!): User!
  updateUserRole(userId: ID!, role: Role!): UsersOfTenants!
  updateUserStatus(userId: ID!, status: MembershipStatus!): UsersOfTenants!
  createPhotoShare(input: CreatePhotoShareInput!, eventId: ID!): PhotoShare!
}

input NewOrganizerInput {
  name: String!
  text: String!
  link: String
}

type PhotoShare {
  id: ID!
  createdAt: DateTime!
  event: TumiEvent!
  eventId: ID!
  cols: Int!
  rows: Int!
  container: String!
  originalBlob: String!
  previewBlob: String
  creatorId: ID!
  creator: User!
  type: String!
  src: String!
  original: String!
}

type Product {
  id: ID!
  createdAt: DateTime!
  title: String!
  description: String!
  availability: [MembershipStatus!]!
  prices: JSON!
  publicationState: PublicationState!
  isESNcard: Boolean!
  needsShippingAddress: Boolean!
  isActive: Boolean!
  leadImageId: ID
  leadImage: ProductImage!
  images: [ProductImage!]!
  tenantId: ID!
  tenant: Tenant!
  lineItems(onlyWithPurchase: Boolean): [LineItem!]!
}

type ProductImage {
  id: ID!
  createdAt: DateTime!
  product: Product!
  productId: ID!
  container: String!
  originalBlob: String!
  previewBlob: String
  creatorId: ID!
  creator: User!
  src: String!
  original: String!
}

enum PublicationState {
  DRAFT
  APPROVAL
  PUBLIC
  ORGANIZERS
}

type Purchase {
  id: ID!
  createdAt: DateTime!
  user: User!
  userId: ID!
  items: [LineItem!]!
  status: PurchaseStatus!
  transactions: [Transaction!]!
}

enum PurchaseStatus {
  PENDING
  PAID
  SENT
  CANCELLED
}

type Query {
  logs: [ActivityLog!]!
  logStats: [ActivityLogStat!]!
  costItems(eventId: ID): [CostItem!]!
  costItem(id: ID!): CostItem!
  blobUploadKey: String!
  event(id: ID!): TumiEvent!
  events(after: DateTime, before: DateTime, search: String, limit: Int, reverseOrder: Boolean): [TumiEvent!]!
  commonEvents(id: ID!): [TumiEvent!]!
  eventOrganizers: [EventOrganizer!]!
  registrations(pageIndex: Int, pageLength: Int, statusList: [RegistrationStatus!]): [EventRegistration!]!
  registration(id: ID!): EventRegistration!
  registrationCount(statusList: [RegistrationStatus!]): Int!
  eventRegistrationCodes(pageIndex: Int, pageLength: Int, includePrivate: Boolean, includePassed: Boolean, includeUsed: Boolean, orderByEvent: Boolean): [EventRegistrationCode!]!
  eventRegistrationCode(id: ID!): EventRegistrationCode!
  eventRegistrationCodeCount: Int!
  eventTemplates(onlyWithoutCategory: Boolean): [EventTemplate!]!
  eventTemplate(id: ID!): EventTemplate!
  eventTemplateCategories: [EventTemplateCategory!]!
  purchases(limitToOwn: Boolean): [Purchase!]!
  purchase(id: ID!): Purchase!
  tenants: [Tenant!]!
  currentTenant: Tenant!
  transactions(range: DateRangeInput, directions: [TransactionDirection!]!, types: [TransactionType!]!, status: [TransactionStatus!]!, search: String, take: Int, skip: Int): [Transaction!]!
  transactionCount(range: DateRangeInput, directions: [TransactionDirection!], types: [TransactionType!], status: [TransactionStatus!], search: String): Int!
  transactionNetAmount(range: DateRangeInput): Decimal!
  users(roleList: [Role!], statusList: [MembershipStatus!], search: String, pageIndex: Int, pageLength: Int, onlyWithPurchase: Boolean, emptyOnEmptySearch: Boolean): [User!]!
  userSearchResultNum(roleList: [Role!], statusList: [MembershipStatus!], search: String): Int!
  user(id: ID!): User!
  currentUser: User
  profileUploadKey: String!
  statistics(tenantId: ID, range: DateRangeInput): Statistics!
  photos(eventId: ID): [PhotoShare!]!
  photoShareKey: String!
}

type Receipt {
  id: ID!
  createdAt: DateTime!
  user: User!
  userId: ID!
  costItem: CostItem!
  costItemId: ID!
  amount: Decimal!
  container: String!
  blob: String!
  preview: String
  type: String
  md5: String
  url: String!
  originalUrl: String!
}

enum RegistrationMode {
  STRIPE
  ONLINE
  EXTERNAL
}

enum RegistrationStatus {
  PENDING
  SUCCESSFUL
  CANCELLED
}

enum RegistrationType {
  ORGANIZER
  PARTICIPANT
  CALENDAR
}

enum Role {
  USER
  ADMIN
}

type ShoppingCart {
  id: ID!
  createdAt: DateTime!
  items: [LineItem!]!
  userOfTenant: UsersOfTenants!
  usersOfTenantsTenantId: ID!
  usersOfTenantsUserId: ID!
}

type Statistics {
  usersRegistered: Int!
  usersWithCustomer: Int!
  usersWithPaymentMethod: Int!
  registrations: Int!
  usersRegisteredEvents: Int!
  usersRegisteredFreeEvents: Int!
  usersRegisteredPaidEvents: Int!
  paidRegistrations: Int!
  checkins: Int!
  totalEvents: Int!
  paidEvents: Int!
  userEventDistribution: JSON!
  userUniversityDistribution: JSON!
  userStatusDistribution: JSON!
  localStatusDistribution: JSON!
  userHistory: JSON!
  registrationHistory: JSON!
  checkinHistory: JSON!
}

type StripePayment {
  id: ID!
  createdAt: DateTime!
  paymentIntent: String
  paymentMethod: String
  paymentMethodType: String
  status: String!
  shipping: JSON
  events: JSON!
  amount: Decimal!
  feeAmount: Decimal
  netAmount: Decimal
  refundedAmount: Decimal
  netLessRefundAmount: Decimal!
  transactions: [Transaction!]!
  checkoutSession: String!
}

type StripeUserData {
  id: ID!
  paymentMethodId: String
  customerId: String!
}

enum SubmissionItemType {
  FILE
  NUMBER
  TEXT
  DATE
  RATING
  LONGTEXT
  BOOLEAN
  SELECT
  CONFIRM
}

enum SubmissionTime {
  REGISTRATION
  BEFORE
  DURING
  AFTER
}

type Tenant {
  id: ID!
  createdAt: DateTime!
  name: String!
  shortName: String!
  organizers: [EventOrganizer!]!
  users: [UsersOfTenants!]!
  imprintPage: String!
  privacyPolicyPage: String!
  aboutPage: String!
  faqPage: String
  tacPage: String
  tutorHub: JSON!
  tutorHubEvents(range: DateRangeInput): JSON!
}

type Transaction {
  id: ID!
  createdAt: DateTime!
  amount: Decimal!
  comment: String
  receipts: [Receipt!]!
  createdBy: User!
  creatorId: ID
  eventRegistration: EventRegistration
  isMembershipFee: Boolean!
  direction: TransactionDirection!
  purchase: Purchase!
  stripePayment: StripePayment
  subject: String!
  tenant: Tenant!
  tenantId: ID!
  status: TransactionStatus!
  type: TransactionType!
  user: User
  userId: ID
}

enum TransactionDirection {
  TUMI_TO_EXTERNAL
  EXTERNAL_TO_TUMI
  TUMI_TO_USER
  USER_TO_TUMI
  USER_TO_EXTERNAL
  EXTERNAL_TO_USER
  USER_TO_USER
}

enum TransactionStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum TransactionType {
  CASH
  STRIPE
  TRANSFER
  PAYPAL
}

type TumiEvent {
  id: ID!
  createdAt: DateTime!
  creatorId: ID!
  createdBy: User!
  eventOrganizerId: ID!
  organizer: EventOrganizer!
  title: String!
  icon: String!
  start: DateTime!
  end: DateTime!
  registrationStart: DateTime!
  organizerRegistrationStart: DateTime!
  description: String!
  disableDeregistration: Boolean!
  excludeFromStatistics: Boolean!
  excludeFromRatings: Boolean!
  coordinates: JSON
  prices: JSON
  location: String!
  googlePlaceId: String
  googlePlaceUrl: String
  registrationLink: String
  registrationMode: RegistrationMode!
  participantText: String!
  organizerText: String!
  organizerSignup: [String!]!
  internalEvent: Boolean!
  participantSignup: [String!]!
  participantLimit: Int!
  organizerLimit: Int!
  publicationState: PublicationState!
  participantRegistrationCount: Int!
  eventRegistrationCodes: [EventRegistrationCode!]!
  insuranceDescription: String!
  shouldBeReportedToInsurance: Boolean!
  countedParticipantRegistrations: Int! @deprecated(reason: "has become the default")
  submissionItems(submissionTime: SubmissionTime): [EventSubmissionItem!]!
  costItems(hideOnInvoice: Boolean): [CostItem!]!
  photoShares: [PhotoShare!]!
  eventTemplate: EventTemplate!
  eventTemplateId: ID!
  freeParticipantSpots: String! @deprecated(reason: "Use participantLimit and participantRegistrationCount instead")
  ratingPending: Boolean!
  participantRating: Float
  participantRatingCount: Int!
  organizerRating: Float
  organizerRatingCount: Int!
  signupVelocity: signupVelocities!
  activeRegistration: EventRegistration
  ownRegistrations(includeCancelled: Boolean): [EventRegistration!]!
  participantRegistrations(includeCancelled: Boolean, includePending: Boolean, includeNoShows: Boolean): [EventRegistration!]!
  organizerRegistrations: [EventRegistration!]!
  ratings: [EventRegistration!]!
  amountCollected: Decimal!
  netAmountCollected: Decimal!
  feesPaid: Decimal!
  refundFeesPaid: Decimal!
  plannedSpend: Decimal!
  submittedSpend: Decimal!
  userIsRegistered: Boolean!
  userIsCreator: Boolean!
  userIsOrganizer: Boolean!
  organizers: [User!]!
  couldBeOrganizer: Boolean!
  couldBeParticipant: Boolean!
  participantsAttended: Int!
  participantRegistrationPossible: JSON!
  organizersRegistered: Int!
  organizerRegistrationPossible: Boolean!
  mailTemplate: String!
}

input UpdateCoreEventInput {
  disableDeregistration: Boolean
  excludeFromStatistics: Boolean
  excludeFromRatings: Boolean
  end: DateTime
  icon: String
  insuranceDescription: String
  organizerLimit: Int
  organizerSignup: [MembershipStatus!]
  participantLimit: Int
  participantSignup: [MembershipStatus!]
  prices: JSON
  registrationLink: String
  registrationMode: RegistrationMode
  registrationStart: DateTime
  organizerRegistrationStart: DateTime
  shouldBeReportedToInsurance: Boolean
  eventOrganizerId: ID!
  start: DateTime
  title: String
}

input UpdateEventLocationInput {
  location: String!
  coordinates: JSON
  googlePlaceId: String
  googlePlaceUrl: String
}

input UpdateGeneralEventInput {
  description: String
  organizerText: String
  participantText: String
}

input UpdateTemplateInput {
  comment: String
  description: String
  duration: Decimal
  icon: String
  insuranceDescription: String
  organizerText: String
  participantText: String
  shouldBeReportedToInsurance: Boolean
  title: String
}

input UpdateTemplateLocationInput {
  location: String!
  coordinates: JSON
  googlePlaceId: String
  googlePlaceUrl: String
}

input UpdateTenantInput {
  imprintPage: String
  privacyPolicyPage: String
  aboutPage: String
  faqPage: String
  tacPage: String
}

input UpdateUserInput {
  firstName: String
  lastName: String
  university: String
  communicationEmail: String
  birthdate: DateTime
  phone: String
  enrolmentStatus: EnrolmentStatus
  bio: String
  country: String
  homeUniversity: String
  instagram: String
  studyProgram: String
}

type User {
  id: ID!
  createdAt: DateTime!
  authId: String!
  firstName: String!
  lastName: String!
  birthdate: DateTime
  picture: String!
  phone: String
  university: String
  iban: String
  paypal: String
  emailVerified: Boolean!
  email: String!
  communicationEmail: String
  calendarToken: String!
  esnCardOverride: Boolean!
  transactions: [Transaction!]!
  createdTransactions: [Transaction!]!
  enrolmentStatus: EnrolmentStatus!
  bio: String
  country: String
  homeUniversity: String
  instagram: String
  position: String
  studyProgram: String
  purchases(skipCancelled: Boolean): [Purchase!]!
  profileComplete: Boolean!
  outstandingRating: Boolean!
  hasEsnCard: Boolean!
  currentTenant(userId: ID): UsersOfTenants
  organizedEvents(hideCancelled: Boolean): [TumiEvent!]!
  participatedEvents(hideCancelled: Boolean): [TumiEvent!]!
  organizedEventsCount: Int!
  createdEvents: [TumiEvent!]!
  createdEventsCount: Int!
  eventRegistrations: [EventRegistration!]!
  hasESNCard: Boolean!
  fullName: String!
}

type UsersOfTenants {
  createdAt: DateTime!
  user: User!
  userId: ID!
  tenant: Tenant!
  tenantId: ID!
  status: MembershipStatus!
  role: Role!
  stripeData: StripeUserData
  cart: ShoppingCart!
}

scalar link__Import

type signupVelocities {
  quarter: Float
  quarterTime: String
  quarterCount: Int
  fifty: Float
  fiftyTime: String
  fiftyCount: Int
  threequarters: Float
  threequartersTime: String
  threequartersCount: Int
  ninety: Float
  ninetyTime: String
  ninetyCount: Int
}